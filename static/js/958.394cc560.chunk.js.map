{"version":3,"file":"static/js/958.394cc560.chunk.js","mappings":"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","sources":["store/reducers/chat/selectors.ts","services/chatSocket.ts","store/reducers/chat/thunk-creators.ts","components/Chat/style.ts","components/Messages/style.ts","components/MessageItem/style.ts","components/MessageItem/MessageItem.tsx","components/Messages/Messages.tsx","components/SendMessageForm/style.ts","components/SendMessageForm/SendMessageForm.tsx","components/Chat/Chat.tsx","pages/ChatPage/ChatPage.tsx"],"sourcesContent":["import { RootState } from \"../..\";\r\n\r\nexport const chat_selectMessages = (state: RootState) => state.chat.messages;\r\nexport const chat_selectConnected = (state: RootState) => state.chat.connected;\r\nexport const chat_selectError = (state: RootState) => state.chat.error;","import { ConnectionSubscriberT, ErrorSubscriberT, MessagesSubscriberT } from \"../store/reducers/chat/thunk-creators\"\r\n\r\ntype ChatEventT = 'connection-changed' | 'messages-received' | 'error-occured';\r\ntype SubscriberT = ConnectionSubscriberT | MessagesSubscriberT | ErrorSubscriberT;\r\n\r\ninterface ISubscribers {\r\n   ['connection-changed']: ConnectionSubscriberT[]\r\n   ['messages-received']: MessagesSubscriberT[]\r\n   ['error-occured']: ErrorSubscriberT[]\r\n}\r\n\r\nclass ChatSocket {\r\n   static _socket: WebSocket | null = null\r\n   static _connected = false\r\n   static _subscribers = {\r\n      'connection-changed': [],\r\n      'messages-received': [],\r\n      'error-occured': []\r\n   } as ISubscribers\r\n\r\n   static _onOpen = () => {\r\n      this._connected = true;\r\n      this._subscribers['connection-changed'].forEach(s => s(this._connected));\r\n   }\r\n\r\n   static _onMessage = (response: { data: string }) => {\r\n      const data = JSON.parse(response.data);\r\n      this._subscribers['messages-received'].forEach(s => s(data));\r\n   }\r\n\r\n   static _onError = () => {\r\n      this._subscribers['error-occured'].forEach(s => s('Some error occured while establishing connection'));\r\n   }\r\n\r\n   static _onClose = () => {\r\n      this._connected = false;\r\n      this._subscribers['connection-changed'].forEach(s => s(this._connected));\r\n      this._cleanUp();\r\n      this._socket = null;\r\n      setTimeout(this._createSocket, 3000);\r\n   }\r\n\r\n   static _cleanUp = () => {\r\n      this._socket?.removeEventListener('open', this._onOpen);\r\n      this._socket?.removeEventListener('message', this._onMessage);\r\n      this._socket?.removeEventListener('error', this._onError);\r\n      this._socket?.removeEventListener('close', this._onClose);\r\n   }\r\n\r\n   static _createSocket = () => {\r\n      if (!this._socket) {\r\n         this._socket = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n         this._socket.addEventListener('open', this._onOpen);\r\n         this._socket.addEventListener('message', this._onMessage);\r\n         this._socket.addEventListener('error', this._onError);\r\n         this._socket.addEventListener('close', this._onClose);\r\n      }\r\n   }\r\n\r\n   static _deleteSocket = () => {\r\n      this._socket?.close();\r\n      this._connected = false;\r\n      this._subscribers['connection-changed'].forEach(s => s(this._connected));\r\n      this._cleanUp();\r\n      this._socket = null;\r\n   }\r\n\r\n   static subscribe = (eventType: ChatEventT, subscriber: SubscriberT) => {\r\n      // @ts-ignore\r\n      this._subscribers[eventType].push(subscriber);\r\n      this._createSocket();\r\n   }\r\n\r\n   static unsubscribe = (eventType: ChatEventT, subscriber: SubscriberT) => {\r\n      this._deleteSocket();\r\n      // @ts-ignore\r\n      this._subscribers[eventType] = this._subscribers[eventType].filter(s => s !== subscriber);\r\n   }\r\n\r\n   static sendMessage = (message: string) => {\r\n      this._socket?.send(message);\r\n   }\r\n}\r\n\r\nexport default ChatSocket;","import { IMessage } from './../../../models/IMessage';\r\nimport { AppDispatch } from \"../..\";\r\nimport { ChatActions } from \".\";\r\nimport ChatSocket from '../../../services/chatSocket';\r\n\r\nconst createConnectionSubscriber = (dispatch: AppDispatch) => (connected: boolean) => {\r\n   dispatch(ChatActions.setConnected(connected));\r\n}\r\nconst createMessagesSubscriber = (dispatch: AppDispatch) => (messages: IMessage[]) => {\r\n   dispatch(ChatActions.newMessageReceived(messages));\r\n}\r\nconst createErrorSubscriber = (dispatch: AppDispatch) => (error: string) => {\r\n   dispatch(ChatActions.setError(error));\r\n}\r\n\r\nexport type ConnectionSubscriberT = ReturnType<typeof createConnectionSubscriber>;\r\nexport type MessagesSubscriberT = ReturnType<typeof createMessagesSubscriber>;\r\nexport type ErrorSubscriberT = ReturnType<typeof createErrorSubscriber>;\r\n\r\nlet connectionSubscriber: ConnectionSubscriberT | null = null;\r\nlet messagesSubscriber: MessagesSubscriberT | null = null;\r\nlet errorSubscriber: ErrorSubscriberT | null = null;\r\n\r\nexport const startFetchingMessages = () => async (dispatch: AppDispatch) => {\r\n   connectionSubscriber = createConnectionSubscriber(dispatch);\r\n   messagesSubscriber = createMessagesSubscriber(dispatch);\r\n   errorSubscriber = createErrorSubscriber(dispatch);\r\n   ChatSocket.subscribe('connection-changed', connectionSubscriber);\r\n   ChatSocket.subscribe('messages-received', messagesSubscriber);\r\n   ChatSocket.subscribe('error-occured', errorSubscriber);\r\n}\r\n\r\nexport const stopFetchingMessages = () => async (dispatch: AppDispatch) => {\r\n   dispatch(ChatActions.fetchingMessagesStopped());\r\n   if (connectionSubscriber && messagesSubscriber && errorSubscriber) {\r\n      ChatSocket.unsubscribe('connection-changed', connectionSubscriber);\r\n      ChatSocket.unsubscribe('messages-received', messagesSubscriber);\r\n      ChatSocket.unsubscribe('error-occured', errorSubscriber);\r\n   }\r\n}\r\n\r\nexport const sendMessage = (message: string) => async (dispatch: AppDispatch) => {\r\n   ChatSocket.sendMessage(message);\r\n}","import styled from \"styled-components\";\r\n\r\nexport const StyledChat = styled.div`\r\n   flex: 1 1 auto;\r\n   display: flex;\r\n   flex-direction: column;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledMessages = styled.div`\r\n   flex: 1 1 auto;\r\n   height: 1px;\r\n   display: flex;\r\n   flex-direction: column;\r\n   overflow-y: auto;\r\n\r\n   &:not(:last-child) {\r\n      margin-bottom: 20px;\r\n   }\r\n`;\r\n\r\nexport const MessagesList = styled.ul`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;","import styled from \"styled-components\";\r\nimport { Avatar } from \"../styled\";\r\n\r\nexport const StyledMessageItem = styled.li`\r\n   display: flex;\r\n   align-items: flex-start;\r\n\r\n   &:not(:last-child) {\r\n      margin-bottom: 10px;\r\n   }\r\n\r\n   .messageItemLink {\r\n      flex: 0 0 40px;\r\n      margin-right: 15px;\r\n   }\r\n`;\r\n\r\nexport const MessageItemAvatar = styled(Avatar)`\r\n   height: 40px;\r\n   border: 1px solid ${props => props.theme.colors.$gray};\r\n   border-radius: 50%;\r\n\r\n   img {\r\n      border-radius: 50%;\r\n   }\r\n`;\r\n\r\nexport const MessageItemMessage = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n\r\n   h4 {\r\n      margin-bottom: 5px;\r\n      font-size: 18px;\r\n      font-weight: 600;\r\n      color: ${props => props.theme.colors.$green};\r\n   }\r\n\r\n   p {\r\n\r\n   }\r\n`;","import React, { FC } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { IMessage } from '../../models/IMessage';\r\nimport defaultAvatar from '../../assets/img/default-user-photo.jpg';\r\nimport { MessageItemAvatar, MessageItemMessage, StyledMessageItem } from \"./style\";\r\nimport { RouteNames } from \"../../router/RouteNames\";\r\n\r\ninterface Props {\r\n   messageBody: IMessage\r\n}\r\n\r\nconst MessageItem: FC<Props> = React.memo(({ messageBody }) => {\r\n   const { message, photo, userId, userName } = messageBody;\r\n\r\n   const avatarUrl = photo || defaultAvatar;\r\n\r\n   return (\r\n      <StyledMessageItem>\r\n         <NavLink className=\"messageItemLink\" to={RouteNames.PROFILE + `/${userId}`}>\r\n            <MessageItemAvatar>\r\n               <img src={avatarUrl} alt=\"Avatar\" />\r\n            </MessageItemAvatar>\r\n         </NavLink>\r\n         <MessageItemMessage>\r\n            <h4>{userName}</h4>\r\n            <p>{message}</p>\r\n         </MessageItemMessage>\r\n      </StyledMessageItem>\r\n   );\r\n})\r\n\r\nexport default MessageItem;","import React, { FC, useEffect, useState } from \"react\";\r\nimport { IMessage } from \"../../models/IMessage\";\r\nimport { MessagesList, StyledMessages } from \"./style\";\r\nimport MessageItem from \"../MessageItem/MessageItem\";\r\n\r\ninterface Props {\r\n   messages: IMessage[]\r\n}\r\n\r\nconst Messages: FC<Props> = React.memo(({ messages }) => {\r\n   const [scrollMode, setScrollMode] = useState(true);\r\n\r\n   const ref = React.useRef<HTMLDivElement>(null);\r\n\r\n   useEffect(() => {\r\n      if (ref.current && scrollMode) {\r\n         ref.current.scrollTop = ref.current.scrollHeight;\r\n      }\r\n   }, [messages]);\r\n\r\n   const handleMessagesScroll = (e: any) => {\r\n      let clientHeight = ref.current?.clientHeight as number;\r\n      let scrollHeight = ref.current?.scrollHeight as number;\r\n      let scrollTop = ref.current?.scrollTop as number;\r\n      let actualScrollMode = scrollHeight - (scrollTop + clientHeight) < 120;\r\n\r\n      if (actualScrollMode !== scrollMode) {\r\n         setScrollMode(actualScrollMode);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <StyledMessages onScroll={handleMessagesScroll} ref={ref}>\r\n         <MessagesList>\r\n            {messages.map((message, i) => (\r\n               <MessageItem key={i} messageBody={message} />\r\n            ))}\r\n         </MessagesList>\r\n      </StyledMessages>\r\n   );\r\n})\r\n\r\nexport default Messages;","import styled from \"styled-components\";\r\n\r\nexport const StyledSendMessageForm = styled.div`\r\n   \r\n`;","import React, { ChangeEvent, FC, FormEvent, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Button } from \"../styled\";\r\nimport { StyledSendMessageForm } from \"./style\";\r\n\r\ninterface Props {\r\n   connected: boolean\r\n   onSubmit: (message: string) => void\r\n}\r\n\r\nconst SendMessageForm: FC<Props> = React.memo(({ connected, onSubmit }) => {\r\n   const [messageText, setMessageText] = useState('');\r\n\r\n   const handleMessageTextChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setMessageText(e.target.value);\r\n   }\r\n\r\n   const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      if (messageText) {\r\n         onSubmit(messageText);\r\n         setMessageText('');\r\n      }\r\n   }\r\n\r\n   return (\r\n      <StyledSendMessageForm>\r\n         <Form onSubmit={handleSubmit} className=\"d-flex flex-row gap-2\">\r\n            <Form.Control\r\n               type=\"text\"\r\n               value={messageText}\r\n               onChange={handleMessageTextChange}\r\n               placeholder=\"Type your message...\" />\r\n            <Button type=\"submit\" disabled={!connected}>Send</Button>\r\n         </Form>\r\n      </StyledSendMessageForm>\r\n   );\r\n})\r\n\r\nexport default SendMessageForm;","import React, { FC } from \"react\";\r\nimport { IMessage } from \"../../models/IMessage\";\r\nimport { StyledChat } from \"./style\";\r\nimport Messages from \"../Messages/Messages\";\r\nimport SendMessageForm from \"../SendMessageForm/SendMessageForm\";\r\n\r\ninterface Props {\r\n   connected: boolean\r\n   messages: IMessage[]\r\n   sendMessage: (message: string) => void\r\n}\r\n\r\nconst Chat: FC<Props> = ({ connected, messages, sendMessage }) => {\r\n   return (\r\n      <StyledChat>\r\n         <Messages\r\n            messages={messages} />\r\n         <SendMessageForm\r\n            connected={connected}\r\n            onSubmit={sendMessage} />\r\n      </StyledChat>\r\n   );\r\n}\r\n\r\nexport default Chat;","import React, { FC, useCallback, useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/redux\";\r\nimport { chat_selectConnected, chat_selectError, chat_selectMessages } from \"../../store/reducers/chat/selectors\";\r\nimport { sendMessage, startFetchingMessages, stopFetchingMessages } from \"../../store/reducers/chat/thunk-creators\";\r\nimport { Page, PageBody } from \"../../components/styled\";\r\nimport GlobalError from \"../../components/GlobalError/GlobalError\";\r\nimport Chat from \"../../components/Chat/Chat\";\r\n\r\nconst ChatPage: FC = () => {\r\n   const connected = useAppSelector(chat_selectConnected);\r\n   const messages = useAppSelector(chat_selectMessages);\r\n   const error = useAppSelector(chat_selectError);\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   useEffect(() => {\r\n      dispatch(startFetchingMessages());\r\n\r\n      return () => {\r\n         dispatch(stopFetchingMessages())\r\n      }\r\n   }, []);\r\n\r\n   const handleMessageSend = useCallback((message: string) => {\r\n      dispatch(sendMessage(message));\r\n   }, [])\r\n\r\n   if (error) return <GlobalError error={error} onPage />\r\n\r\n   return (\r\n      <Page>\r\n         <PageBody>\r\n            <Chat\r\n               connected={connected}\r\n               messages={messages}\r\n               sendMessage={handleMessageSend} />\r\n         </PageBody>\r\n      </Page>\r\n   );\r\n}\r\n\r\nexport default ChatPage;"],"names":["chat_selectMessages","state","chat","messages","chat_selectConnected","connected","chat_selectError","error","ChatSocket","_socket","_connected","_subscribers","_onOpen","forEach","s","_onMessage","response","data","JSON","parse","_onError","_onClose","_cleanUp","setTimeout","_createSocket","removeEventListener","WebSocket","addEventListener","_deleteSocket","close","subscribe","eventType","subscriber","push","unsubscribe","filter","sendMessage","message","send","createConnectionSubscriber","dispatch","ChatActions","createMessagesSubscriber","createErrorSubscriber","connectionSubscriber","messagesSubscriber","errorSubscriber","StyledChat","styled","StyledMessages","MessagesList","StyledMessageItem","MessageItemAvatar","Avatar","props","theme","colors","$gray","MessageItemMessage","$green","React","messageBody","photo","userId","userName","avatarUrl","defaultAvatar","className","to","RouteNames","src","alt","useState","scrollMode","setScrollMode","ref","useEffect","current","scrollTop","scrollHeight","onScroll","e","clientHeight","actualScrollMode","map","i","StyledSendMessageForm","onSubmit","messageText","setMessageText","Form","preventDefault","type","value","onChange","target","placeholder","disabled","useAppSelector","useAppDispatch","handleMessageSend","useCallback","GlobalError","onPage"],"sourceRoot":""}