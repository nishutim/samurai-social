{"version":3,"file":"static/js/239.b1cafde7.chunk.js","mappings":"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","sources":["components/Profile/style.ts","components/ProfileAvatar/style.ts","components/ProfileAvatar/ProfileAvatar.tsx","components/ProfileInfo/style.ts","components/ProfileInfo/Info.tsx","components/ProfileInfo/InfoForm.tsx","components/ProfileInfo/ProfileInfo.tsx","components/ProfileStatus/style.ts","components/ProfileStatus/StatusForm.tsx","components/ProfileStatus/ProfileStatus.tsx","components/Profile/Profile.tsx","store/reducers/profile/selectors.ts","pages/ProfilePage/ProfilePage.tsx","store/reducers/profile/thunk-creators.ts"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledProfile = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;","import styled from \"styled-components\";\r\nimport { Avatar } from \"../styled\";\r\n\r\nexport const StyledProfileAvatar = styled.div`\r\n   border: 1px solid ${props => props.theme.colors.$lightGray};\r\n   border-radius: 5px;\r\n   align-self: flex-start;\r\n   display: flex;\r\n   flex-direction: column;\r\n\r\n   &:not(:last-child) {\r\n      margin-bottom: 40px;\r\n   }\r\n`;\r\n\r\nexport const ProfileAvatarAvatar = styled(Avatar)`\r\n   height: 300px;\r\n   width: 260px;\r\n   border-bottom: 1px solid ${props => props.theme.colors.$lightGray};\r\n   border-radius: 5px;\r\n   border-bottom-left-radius: 0;\r\n   border-bottom-right-radius: 0;\r\n\r\n   img {\r\n      border-radius: 5px;\r\n      border-bottom-left-radius: 0;\r\n      border-bottom-right-radius: 0;\r\n   }\r\n`;\r\n\r\nexport const UploadPhotoBtn = styled.label`\r\n   padding: 5px 15px;\r\n   border-radius: 5px;\r\n   border-top-left-radius: 0;\r\n   border-top-right-radius: 0;\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n   background-color: #E89F71;\r\n   font-size: 18px;\r\n   color: white;\r\n   transition: all 0.3s ease;\r\n\r\n   &:hover {\r\n      background-color: #c48864;\r\n   }\r\n\r\n   input {\r\n      display: none;\r\n   }\r\n`;","import React, { ChangeEvent, FC } from \"react\";\r\nimport { ProfileAvatarAvatar, StyledProfileAvatar, UploadPhotoBtn } from \"./style\";\r\nimport defaultAvatar from '../../assets/img/default-user-photo.jpg';\r\nimport { useAppDispatch } from \"../../hooks/redux\";\r\nimport { updatePhoto } from \"../../store/reducers/auth/thunk-creators\";\r\n\r\ninterface Props {\r\n   photo: string | null\r\n   isOwner: boolean\r\n}\r\n\r\nconst ProfileAvatar: FC<Props> = React.memo(({ photo, isOwner }) => {\r\n   const avatarUrl = photo || defaultAvatar;\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const file = e.target.files && e.target.files[0];\r\n      if (file) {\r\n         dispatch(updatePhoto(file));\r\n      }\r\n   }\r\n\r\n   return (\r\n      <StyledProfileAvatar>\r\n         <ProfileAvatarAvatar>\r\n            <img src={avatarUrl} alt=\"Profile Avatar\" />\r\n         </ProfileAvatarAvatar>\r\n         {isOwner &&\r\n            <UploadPhotoBtn>\r\n               Upload new photo\r\n               <input type=\"file\" onChange={handleFileChange} />\r\n            </UploadPhotoBtn>}\r\n      </StyledProfileAvatar>\r\n   );\r\n})\r\n\r\nexport default ProfileAvatar;","import styled from \"styled-components\";\r\n\r\nexport const StyledProfileInfo = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\nexport const StyledInfo = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\nexport const InfoList = styled.ul`\r\n   display: flex;\r\n   flex-direction: column;\r\n   gap: 5px;\r\n\r\n   &:not(:first-child) {\r\n      margin-top: 20px;\r\n   }\r\n`;\r\n\r\nexport const InfoListItem = styled.li`\r\n   font-size: 20px;\r\n   font-weight: 500;\r\n   color: ${props => props.theme.colors.$gray};\r\n\r\n   span {\r\n      font-weight: 600;\r\n      color: ${props => props.theme.colors.$black};\r\n   }\r\n`;\r\n\r\nexport const ContactsList = styled.ul`\r\n   padding-left: 30px;\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\nexport const ContactsListItem = styled.li`\r\n   font-size: 18px;\r\n   color: ${props => props.theme.colors.$orange};\r\n\r\n   span {\r\n      color: ${props => props.theme.colors.$black};\r\n   }\r\n`;\r\n\r\nexport const StyledInfoForm = styled.form`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\nexport const InfoFormStatus = styled.p`\r\n   margin-bottom: 5px;\r\n   color: ${props => props.theme.colors.$red};\r\n`;\r\n\r\nexport const FieldList = styled(InfoList)`\r\n   &:not(:first-child) {\r\n      margin-top: 0;\r\n   }\r\n`;\r\n\r\nexport const FieldListItem = styled(InfoListItem)`\r\n   display: flex;\r\n   flex-direction: column;\r\n\r\n   span {\r\n      flex: 0 0 auto;\r\n      margin-right: 5px;\r\n   }\r\n\r\n   input {\r\n      width: 100%;\r\n      background-color: transparent;\r\n      font-size: 20px;\r\n      font-weight: 500;\r\n      color: ${props => props.theme.colors.$gray}\r\n   }\r\n\r\n   input[type=\"checkbox\"] {\r\n      width: auto;\r\n   }\r\n`;\r\n\r\nexport const ContactsFieldList = styled(ContactsList)`\r\n\r\n`;\r\n\r\nexport const ContactsFieldListItem = styled(FieldListItem)`\r\n   font-size: 18px;\r\n\r\n   span {\r\n      font-weight: 500;\r\n   }\r\n\r\n   input {\r\n      font-size: 18px;\r\n      color: ${props => props.theme.colors.$orange}\r\n   }\r\n`;\r\n\r\nexport const ErrorMessage = styled.p`\r\n   font-size: 16px;\r\n   color: ${props => props.theme.colors.$red}\r\n`;","import React, { FC } from \"react\";\r\nimport { IContacts } from \"../../models/IContacts\";\r\nimport { IProfileData } from \"../../models/IProfileData\";\r\nimport { Button } from \"../styled\";\r\nimport { InfoListItem, StyledInfo, InfoList, ContactsList, ContactsListItem } from \"./style\";\r\n\r\ninterface Props {\r\n   profile: IProfileData\r\n   isOwner: boolean\r\n   handleEditBtnClick: () => void\r\n}\r\n\r\nconst Info: FC<Props> = ({ profile, isOwner, handleEditBtnClick }) => {\r\n   const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription, contacts } = profile;\r\n\r\n   return (\r\n      <StyledInfo>\r\n         {isOwner &&\r\n            <Button\r\n               alignSelf=\"flex-start\"\r\n               onClick={handleEditBtnClick}\r\n            >\r\n               Edit profile\r\n            </Button>}\r\n         <InfoList>\r\n            <InfoListItem><span>Full name:</span> {fullName}</InfoListItem>\r\n            <InfoListItem><span>About me:</span> {aboutMe}</InfoListItem>\r\n            <InfoListItem><span>Looking for a job:</span> {lookingForAJob ? 'Yes' : 'No'}</InfoListItem>\r\n            <InfoListItem><span>Looking for a job description:</span> {lookingForAJobDescription}</InfoListItem>\r\n            <InfoListItem><span>Contacts:</span></InfoListItem>\r\n            <ContactsList>\r\n               {Object.keys(contacts).map(contact => (\r\n                  <ContactsListItem key={contact}><span>{contact}:</span> {contacts[contact as keyof IContacts]}</ContactsListItem>\r\n               ))}\r\n            </ContactsList>\r\n         </InfoList>\r\n      </StyledInfo>\r\n   );\r\n}\r\n\r\nexport default Info;","import { FormikErrors, useFormik } from \"formik\";\r\nimport React, { FC, useState } from \"react\";\r\nimport { IContacts } from \"../../models/IContacts\";\r\nimport { IProfile } from \"../../models/IProfile\";\r\nimport { IProfileData } from \"../../models/IProfileData\";\r\nimport { SetStatusT } from \"../../types\";\r\nimport { Button, FlexContainer } from \"../styled\";\r\nimport {\r\n   ContactsFieldList,\r\n   ContactsFieldListItem,\r\n   FieldList,\r\n   FieldListItem,\r\n   InfoFormStatus,\r\n   StyledInfoForm,\r\n   ErrorMessage\r\n} from \"./style\";\r\n\r\nconst validate = (values: FormValues) => {\r\n   const errors: FormikErrors<FormValues> = {};\r\n   if (values.fullName.length > 50) {\r\n      errors.fullName = 'Must be 50 characters or less';\r\n   }\r\n\r\n   if (values.aboutMe.length > 100) {\r\n      errors.aboutMe = 'Must be 100 characters or less';\r\n   }\r\n\r\n   if (values.lookingForAJobDescription.length > 150) {\r\n      errors.lookingForAJobDescription = 'Must be 150 characters or less';\r\n   }\r\n\r\n   Object.keys(values.contacts).map(contact => {\r\n      if (values.contacts[contact as keyof IContacts].length > 60) {\r\n         if (!errors.contacts) {\r\n            errors.contacts = {};\r\n         }\r\n         errors.contacts[contact as keyof IContacts] = 'Must be 60 characters or less';\r\n      }\r\n   });\r\n\r\n   return errors;\r\n}\r\n\r\ninterface FormValues {\r\n   fullName: string\r\n   aboutMe: string\r\n   lookingForAJob: boolean\r\n   lookingForAJobDescription: string\r\n   contacts: IContacts\r\n}\r\n\r\ninterface Props {\r\n   profile: IProfileData\r\n   handleSaveBtnClick: (profile: IProfile, setStatus: SetStatusT) => void\r\n}\r\n\r\nconst InfoForm: FC<Props> = React.memo(({ profile, handleSaveBtnClick }) => {\r\n   const [disableBtn, setDisableBtn] = useState(false);\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         fullName: profile.fullName,\r\n         aboutMe: profile.aboutMe,\r\n         lookingForAJob: profile.lookingForAJob,\r\n         lookingForAJobDescription: profile.lookingForAJobDescription,\r\n         contacts: profile.contacts\r\n      } as FormValues,\r\n      validate,\r\n      onSubmit: async (values, { setStatus }) => {\r\n         setDisableBtn(true);\r\n         await handleSaveBtnClick(values, setStatus);\r\n         setDisableBtn(false);\r\n      }\r\n   })\r\n\r\n   return (\r\n      <StyledInfoForm onSubmit={formik.handleSubmit}>\r\n         <Button disabled={disableBtn} type=\"submit\" alignSelf=\"flex-start\" mb=\"20px\">Save profile</Button>\r\n         {formik.status && <InfoFormStatus>{formik.status}</InfoFormStatus>}\r\n         <FieldList>\r\n            <FieldListItem>\r\n               {formik.errors.fullName && <ErrorMessage>{formik.errors.fullName}</ErrorMessage>}\r\n               <FlexContainer>\r\n                  <span>Full name:</span>\r\n                  <input\r\n                     type=\"text\"\r\n                     name=\"fullName\"\r\n                     value={formik.values.fullName}\r\n                     onChange={formik.handleChange} />\r\n               </FlexContainer>\r\n            </FieldListItem>\r\n            <FieldListItem>\r\n               {formik.errors.aboutMe && <ErrorMessage>{formik.errors.aboutMe}</ErrorMessage>}\r\n               <FlexContainer>\r\n                  <span>About me:</span>\r\n                  <input\r\n                     type=\"text\"\r\n                     name=\"aboutMe\"\r\n                     value={formik.values.aboutMe}\r\n                     onChange={formik.handleChange} />\r\n               </FlexContainer>\r\n            </FieldListItem>\r\n            <FieldListItem>\r\n               <FlexContainer>\r\n                  <span>Looking for a job:</span>\r\n                  <input\r\n                     type=\"checkbox\"\r\n                     name=\"lookingForAJob\"\r\n                     checked={formik.values.lookingForAJob}\r\n                     onChange={formik.handleChange} />\r\n               </FlexContainer>\r\n            </FieldListItem>\r\n            <FieldListItem>\r\n               {formik.errors.lookingForAJobDescription && <ErrorMessage>{formik.errors.lookingForAJobDescription}</ErrorMessage>}\r\n               <FlexContainer>\r\n                  <span>Looking for a job description:</span>\r\n                  <input\r\n                     type=\"text\"\r\n                     name=\"lookingForAJobDescription\"\r\n                     value={formik.values.lookingForAJobDescription}\r\n                     onChange={formik.handleChange} />\r\n               </FlexContainer>\r\n            </FieldListItem>\r\n            <FieldListItem><span>Contacts:</span></FieldListItem>\r\n            <ContactsFieldList>\r\n               {Object.keys(formik.values.contacts).map(contact => (\r\n                  <ContactsFieldListItem key={contact}>\r\n                     {formik.errors.contacts && formik.errors.contacts[contact as keyof IContacts] &&\r\n                        <ErrorMessage>{formik.errors.contacts[contact as keyof IContacts]}</ErrorMessage>}\r\n                     <FlexContainer>\r\n                        <span>{contact}:</span>\r\n                        <input\r\n                           type=\"text\"\r\n                           name={`contacts.${contact}`}\r\n                           value={formik.values.contacts[contact as keyof IContacts]}\r\n                           onChange={formik.handleChange} />\r\n                     </FlexContainer>\r\n                  </ContactsFieldListItem>\r\n               ))}\r\n            </ContactsFieldList>\r\n         </FieldList>\r\n      </StyledInfoForm>\r\n   );\r\n})\r\n\r\nexport default InfoForm;","import React, { FC, useCallback, useState } from \"react\";\r\nimport { useAppDispatch } from \"../../hooks/redux\";\r\nimport { IProfile } from \"../../models/IProfile\";\r\nimport { IProfileData } from \"../../models/IProfileData\";\r\nimport { SetStatusT } from \"../../types\";\r\nimport { StyledProfileInfo } from \"./style\";\r\nimport { updateProfile } from \"../../store/reducers/auth/thunk-creators\";\r\nimport Info from \"./Info\";\r\nimport InfoForm from \"./InfoForm\";\r\n\r\ninterface Props {\r\n   profile: IProfileData\r\n   isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<Props> = React.memo(({ profile, isOwner }) => {\r\n   const [editMode, setEditMode] = useState(false);\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   const handleEditBtnClick = () => {\r\n      setEditMode(true);\r\n   }\r\n\r\n   const handleSaveBtnClick = useCallback(async (profile: IProfile, setStatus: SetStatusT) => {\r\n      try {\r\n         await dispatch(updateProfile(profile, setStatus));\r\n         setEditMode(false);\r\n      } catch (e: any) { }\r\n   }, [])\r\n\r\n   return (\r\n      <StyledProfileInfo>\r\n         {!editMode ?\r\n            <Info\r\n               profile={profile}\r\n               isOwner={isOwner}\r\n               handleEditBtnClick={handleEditBtnClick} />\r\n            :\r\n            <InfoForm\r\n               profile={profile}\r\n               handleSaveBtnClick={handleSaveBtnClick} />\r\n         }\r\n      </StyledProfileInfo>\r\n   );\r\n})\r\n\r\nexport default ProfileInfo;","import styled from \"styled-components\";\r\nimport { Button } from \"../styled\";\r\n\r\nexport const StyledProfileStatus = styled.div`\r\n   &:not(:last-child) {\r\n      margin-bottom: 40px;\r\n   }\r\n`;\r\n\r\nexport const Status = styled.div`\r\n   display: flex;\r\n   align-items: center;\r\n`;\r\n\r\nexport const EditBtn = styled(Button)`\r\n   min-width: 56.88px;\r\n   padding: 5px 10px;\r\n   font-size: 16px;\r\n   margin-right: 10px;\r\n`;\r\n\r\nexport const StatusText = styled.p`\r\n   border: 1px solid transparent;\r\n   border-left: none;\r\n   font-size: 22px;\r\n`;\r\n\r\nexport const StyledStatusForm = styled.form`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\nexport const StatusFormStatus = styled.p`\r\n   font-size: 16px;\r\n   color: ${props => props.theme.colors.$red};\r\n`;\r\n\r\nexport const StatusFormInput = styled.input`\r\n   flex: 1 1 100%;\r\n   max-width: 500px;\r\n   min-height: 35px;\r\n   border-bottom: 1px solid ${props => props.theme.colors.$lightGray};\r\n   background-color: transparent;\r\n   font-size: 22px;\r\n   font-weight: 500;\r\n   color: inherit;\r\n`;","import React, { FC, useState } from \"react\";\r\nimport { FormikErrors, useFormik } from \"formik\";\r\nimport { FlexContainer } from \"../styled\";\r\nimport { EditBtn, StyledStatusForm, StatusFormInput, StatusFormStatus } from \"./style\";\r\n\r\nconst validate = (values: FormValues) => {\r\n   const errors: FormikErrors<FormValues> = {};\r\n   if (values.statusText.length > 100) {\r\n      errors.statusText = 'Must be 100 characters or less';\r\n   }\r\n\r\n   return errors;\r\n}\r\n\r\ninterface FormValues {\r\n   statusText: string\r\n}\r\n\r\ninterface Props {\r\n   status: string\r\n   handleSaveBtnClick: (status: string) => void\r\n}\r\n\r\nconst StatusForm: FC<Props> = React.memo(({ status, handleSaveBtnClick }) => {\r\n   const [disableBtn, setDisableBtn] = useState(false);\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         statusText: status\r\n      } as FormValues,\r\n      validate,\r\n      onSubmit: async ({ statusText }) => {\r\n         setDisableBtn(true);\r\n         await handleSaveBtnClick(statusText);\r\n         setDisableBtn(false);\r\n      }\r\n   });\r\n\r\n   return (\r\n      <StyledStatusForm onSubmit={formik.handleSubmit}>\r\n         {formik.errors.statusText && <StatusFormStatus>{formik.errors.statusText}</StatusFormStatus>}\r\n         <FlexContainer>\r\n            <EditBtn disabled={disableBtn} type=\"submit\">Save</EditBtn>\r\n            <StatusFormInput\r\n               type=\"text\"\r\n               name=\"statusText\"\r\n               value={formik.values.statusText}\r\n               onChange={formik.handleChange} />\r\n         </FlexContainer>\r\n      </StyledStatusForm>\r\n   );\r\n})\r\n\r\nexport default StatusForm;","import React, { FC, useCallback, useState } from \"react\";\r\nimport { useAppDispatch } from \"../../hooks/redux\";\r\nimport { updateStatus } from \"../../store/reducers/auth/thunk-creators\";\r\nimport StatusForm from \"./StatusForm\";\r\nimport { EditBtn, Status, StatusText, StyledProfileStatus } from \"./style\";\r\n\r\ninterface Props {\r\n   status: string\r\n   isOwner: boolean\r\n}\r\n\r\nconst ProfileStatus: FC<Props> = React.memo(({ status, isOwner }) => {\r\n   const [editMode, setEditMode] = useState(false);\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   const handleEditBtnClick = () => {\r\n      setEditMode(true);\r\n   }\r\n\r\n   const handleSaveBtnClick = useCallback(async (statusText: string) => {\r\n      try {\r\n         if (status !== statusText) {\r\n            await dispatch(updateStatus(statusText));\r\n         }\r\n         setEditMode(false);\r\n      } catch (e: any) {\r\n         alert(e);\r\n      }\r\n   }, [status]);\r\n\r\n   return (\r\n      <StyledProfileStatus>\r\n         {!editMode ?\r\n            <Status>\r\n               {isOwner && <EditBtn onClick={handleEditBtnClick}>Edit</EditBtn>}\r\n               <StatusText>{status || 'I don\\'t have a status'}</StatusText>\r\n            </Status>\r\n            :\r\n            <StatusForm\r\n               status={status}\r\n               handleSaveBtnClick={handleSaveBtnClick} />\r\n         }\r\n      </StyledProfileStatus>\r\n   );\r\n})\r\n\r\nexport default ProfileStatus;","import React, { FC } from \"react\";\r\nimport { IProfileData } from \"../../models/IProfileData\";\r\nimport { StyledProfile } from \"./style\";\r\nimport ProfileAvatar from \"../ProfileAvatar/ProfileAvatar\";\r\nimport ProfileInfo from \"../ProfileInfo/ProfileInfo\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\n\r\ninterface Props {\r\n   profile: IProfileData\r\n   status: string\r\n   isOwner: boolean\r\n}\r\n\r\nconst Profile: FC<Props> = React.memo(({ profile, status, isOwner }) => {\r\n   const photo = profile.photos.large;\r\n\r\n   return (\r\n      <StyledProfile>\r\n         <ProfileAvatar\r\n            photo={photo}\r\n            isOwner={isOwner} />\r\n         <ProfileStatus\r\n            status={status}\r\n            isOwner={isOwner} />\r\n         <ProfileInfo\r\n            profile={profile}\r\n            isOwner={isOwner} />\r\n      </StyledProfile>\r\n   );\r\n})\r\n\r\nexport default Profile;","import { RootState } from \"../..\";\r\n\r\nexport const profile_selectIsLoading = (state: RootState) => state.profile.isLoading;\r\nexport const profile_selectProfile = (state: RootState) => state.profile.profile;\r\nexport const profile_selectStatus = (state: RootState) => state.profile.status;\r\nexport const profile_selectError = (state: RootState) => state.profile.error;","import React, { FC, useEffect } from \"react\";\r\nimport { Page, PageBody } from \"../../components/styled/Page\";\r\nimport PagePreloader from \"../../components/PagePreloader/PagePreloader\";\r\nimport Profile from \"../../components/Profile/Profile\";\r\nimport { Navigate, useParams } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/redux\";\r\nimport { auth_selectAuthUser, auth_selectAuthUserStatus, auth_selectId } from \"../../store/reducers/auth/selectors\";\r\nimport { fetchProfileData } from \"../../store/reducers/profile/thunk-creators\";\r\nimport { profile_selectError, profile_selectIsLoading, profile_selectProfile, profile_selectStatus } from \"../../store/reducers/profile/selectors\";\r\nimport { RouteNames } from \"../../router/RouteNames\";\r\nimport GlobalError from \"../../components/GlobalError/GlobalError\";\r\n\r\nconst ProfilePage: FC = () => {\r\n   const authUserId = useAppSelector(auth_selectId);\r\n   const isLoading = useAppSelector(profile_selectIsLoading);\r\n   const profile = useAppSelector(profile_selectProfile);\r\n   const status = useAppSelector(profile_selectStatus);\r\n   const authUserProfile = useAppSelector(auth_selectAuthUser);\r\n   const authUserStatus = useAppSelector(auth_selectAuthUserStatus);\r\n   const error = useAppSelector(profile_selectError);\r\n\r\n   const paramsId = Number(useParams().id);\r\n\r\n   const currentProfile = paramsId ? profile : authUserProfile;\r\n   const currentStatus = paramsId ? status : authUserStatus;\r\n   const isOwner = !paramsId;\r\n\r\n   console.log(currentStatus);\r\n\r\n\r\n   const dispatch = useAppDispatch();\r\n\r\n   useEffect(() => {\r\n      if (paramsId) {\r\n         dispatch(fetchProfileData(paramsId));\r\n      }\r\n   }, []);\r\n\r\n   if (!currentProfile || isLoading) return <PagePreloader />\r\n   if (error) return <GlobalError error={error} onPage />\r\n   if (paramsId === authUserId) return <Navigate to={RouteNames.PROFILE} />\r\n\r\n   return (\r\n      <Page>\r\n         <PageBody>\r\n            <Profile\r\n               profile={currentProfile}\r\n               status={currentStatus}\r\n               isOwner={isOwner} />\r\n         </PageBody>\r\n      </Page>\r\n   );\r\n}\r\n\r\nexport default ProfilePage;","import { ProfileActions } from './index';\r\nimport { AppDispatch } from \"../..\";\r\nimport ProfileService from '../../../services/profileService';\r\n\r\nexport const fetchProfileData = (id: number) => async (dispatch: AppDispatch) => {\r\n   dispatch(ProfileActions.fetchProfileDataStarted());\r\n   try {\r\n      const profile = await ProfileService.fetchProfile(id);\r\n      const status = await ProfileService.fetchStatus(id);\r\n      dispatch(ProfileActions.fetchProfileDataSuccess({ profile, status }));\r\n   } catch (e: any) {\r\n      dispatch(ProfileActions.fetchProfileDataFail(e.message));\r\n      alert(e.message + ' Please, reload page');\r\n   }\r\n}"],"names":["StyledProfile","styled","StyledProfileAvatar","props","theme","colors","$lightGray","ProfileAvatarAvatar","Avatar","UploadPhotoBtn","React","photo","isOwner","avatarUrl","defaultAvatar","dispatch","useAppDispatch","src","alt","type","onChange","e","file","target","files","updatePhoto","StyledProfileInfo","StyledInfo","InfoList","InfoListItem","$gray","$black","ContactsList","ContactsListItem","$orange","StyledInfoForm","InfoFormStatus","$red","FieldList","FieldListItem","ContactsFieldList","ContactsFieldListItem","ErrorMessage","profile","handleEditBtnClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","alignSelf","onClick","Object","keys","map","contact","validate","values","errors","length","InfoForm","handleSaveBtnClick","useState","disableBtn","setDisableBtn","formik","useFormik","initialValues","onSubmit","setStatus","handleSubmit","disabled","mb","status","name","value","handleChange","checked","ProfileInfo","editMode","setEditMode","useCallback","updateProfile","StyledProfileStatus","Status","EditBtn","Button","StatusText","StyledStatusForm","StatusFormStatus","StatusFormInput","statusText","StatusForm","ProfileStatus","updateStatus","alert","photos","large","profile_selectIsLoading","state","isLoading","profile_selectProfile","profile_selectStatus","profile_selectError","error","authUserId","useAppSelector","auth_selectId","authUserProfile","auth_selectAuthUser","authUserStatus","auth_selectAuthUserStatus","paramsId","Number","useParams","id","currentProfile","currentStatus","console","log","useEffect","ProfileActions","ProfileService","message","PagePreloader","GlobalError","onPage","to","RouteNames","Page"],"sourceRoot":""}